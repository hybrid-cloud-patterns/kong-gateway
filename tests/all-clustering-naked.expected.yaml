---
# Source: kong-clustering/templates/post-deploy-roles.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kong-clustering-gitops
  namespace: test
---
# Source: kong-clustering/templates/post-deploy-cp.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: test
  name: kong-clustering-cp-post-deploy
  annotations:
    argocd.argoproj.io/sync-wave: "3"
data:
  patch-job.sh: |
    #!/bin/bash
    set -eu
    # Login Argo
    argocd login --username admin \
      $(oc get routes -n unmanaged- -gitops-server -otemplate='{{ .spec.host }}') \
      --password $(oc get secret -n unmanaged- -gitops-cluster -ojsonpath='{.data.admin\.password}' | base64 -d) \
      --insecure \
      --grpc-web
    argocd app patch-resource --namespace kong kong-cp \
      --kind Deployment \
      --resource-name kong-cp-kong \
      --patch "{\"spec\": { \"template\" : { \"spec\" : {\"containers\":[{\"name\":\"proxy\",\"env\": [{ \"name\" : \"KONG_ADMIN_API_URI\", \"value\": \"$(oc get route -n kong  kong-cp-kong-admin -ojsonpath='{.spec.host}')\" }]}]}}}}"  --patch-type 'application/strategic-merge-patch+json'
---
# Source: kong-clustering/templates/post-deploy-dp.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: test
  name: kong-clustering-dp-post-deploy
  annotations:
    argocd.argoproj.io/sync-wave: "6"
data:
  post-deploy.sh: |
    #!/bin/bash
    set -eu
    argocd login --username admin \
      $(oc get routes -n unmanaged- -gitops-server -otemplate='{{ .spec.host }}') \
      --password $(oc get secret -n unmanaged- -gitops-cluster -ojsonpath='{.data.admin\.password}' | base64 -d) \
      --insecure \
      --grpc-web
    if ! oc get cm -n kong cluster-urls; then
      echo "config map cluster-urls not found"
      exit 1
    fi
    if ! oc get appprojects -n unmanaged- dataplane; then
      echo "dataplane project cannot be retrieved"
      exit 1
    fi
    # for establishing kong clusters
    argocd app patch-resource --namespace kong kong-dp --kind Deployment --resource-name kong-dp-kong --patch "{\"spec\": { \"template\" : { \"spec\" : {\"containers\":[{\"name\":\"proxy\",\"env\": [{ \"name\" : \"KONG_CLUSTER_CONTROL_PLANE\", \"value\": \"$(oc get cm cluster-urls -n kong -o jsonpath='{.data.CLUSTER_URL}'):8005\" }]}]}}}}"  --patch-type 'application/strategic-merge-patch+json'
    argocd app patch-resource --namespace kong kong-dp --kind Deployment --resource-name kong-dp-kong --patch "{\"spec\": { \"template\" : { \"spec\" : {\"containers\":[{\"name\":\"proxy\",\"env\": [{ \"name\" : \"KONG_CLUSTER_TELEMETRY_ENDPOINT\", \"value\": \"$(oc get cm cluster-urls -n kong -o jsonpath='{.data.CLUSTER_TELEMETRY_URL}'):8006\" }]}]}}}}"  --patch-type 'application/strategic-merge-patch+json'
    # patch rool url and redirect url for keycloak client
    # DP_DOMAIN=$(argocd cluster get dp -o server)
    # DP_DOMAIN=${DP_DOMAIN/https:\/\/api/apps}
    # DP_DOMAIN=${DP_DOMAIN/:*/}
    # if ! argocd app patch-resource dp-prereqs --kind KeycloakClient --resource-name kong-demo-client --namespace=keycloak --patch "{\"spec\":{\"client\":{\"rootUrl\": \"http://kong-dp-kong-proxy-kong.${DP_DOMAIN}/\",\"redirectUris\":[\"http://kong-kong-proxy-kong.${DP_DOMAIN}/*\"]}}}" --patch-type 'application/merge-patch+json'; then
    #   echo "keycloak client not found"
    #   exit 1
    # fi
---
# Source: kong-clustering/templates/post-deploy-roles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kong-clustering-jobs
rules:
  - verbs:
      - get
    apiGroups:
      - route.openshift.io
    resources:
      - routes
  - apiGroups:
      - argoproj.io
    resources:
      - appprojects
    verbs:
      - get
  - verbs:
      - create
      - get
    apiGroups:
      - ''
    resources:
      - secrets
      - configmaps
      - services
---
# Source: kong-clustering/templates/post-deploy-roles.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kong-clustering-jobs-cluster-binding
subjects:
  - kind: ServiceAccount
    namespace: test
    name: kong-clustering-gitops
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kong-clustering-jobs
---
# Source: kong-clustering/templates/post-deploy-roles.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kong-clustering-role
  namespace: test
rules:
  - apiGroups:
      - security.openshift.io
    resourceNames:
      - anyuid
    resources:
      - securitycontextconstraints
    verbs:
      - use
---
# Source: kong-clustering/templates/post-deploy-roles.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kong-clustering-jobs-binding
  namespace: test
subjects:
  - kind: ServiceAccount
    name: kong-clustering-gitops
    namespace: test
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kong-clustering-role
---
# Source: kong-clustering/templates/post-deploy-cp.yaml
apiVersion: batch/v1
kind: Job
metadata:
  namespace: test
  name: kong-clustering-cp-post-deploy
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  backoffLimit: 20
  template:
    spec:
      restartPolicy: OnFailure
      serviceAccountName: kong-clustering-gitops
      volumes:
      - name: patch-job
        configMap:
          name: kong-clustering-cp-post-deploy
          defaultMode: 0711 
      containers:
      - image: cmwylie19/kube-argo-base
        name: patch-deploy
        resources: {}
        volumeMounts:
        - name: patch-job
          mountPath: /opt/scripts
        securityContext:
           runAsUser: 0
        command: ["sh","-c","/opt/scripts/patch-job.sh"]
---
# Source: kong-clustering/templates/post-deploy-dp.yaml
apiVersion: batch/v1
kind: Job
metadata:
  namespace: test
  name: kong-clustering-dp-post-deploy
  generateName: path-kong-clustering
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/sync-wave: "6"
    # argocd.argoproj.io/hook-delete-policy: HookSucceeded # commenting out for debugging
spec:
  backoffLimit: 20
  template:
    spec:
      restartPolicy: OnFailure
      serviceAccountName: kong-clustering-gitops
      volumes:
      - name: post-deploy
        configMap:
          name: kong-clustering-dp-post-deploy 
          defaultMode: 0711 
      containers:
      - image: quay.io/mpaulgreen/argo-helper:1.0
        name: post-deploy
        resources: {}
        volumeMounts:
        - name: post-deploy
          mountPath: /opt/scripts
        securityContext:
           runAsUser: 0
        command: ["sh","-c","/opt/scripts/post-deploy.sh"]

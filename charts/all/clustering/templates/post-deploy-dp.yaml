apiVersion: batch/v1
kind: Job
metadata:
  namespace: {{ .Values.global.namespace }}
  name: {{ .Values.global.name }}-dp-post-deploy
  generateName: path-kong-clustering
  annotations:
    argocd.argoproj.io/sync-wave: "6"
spec:
  backoffLimit: 20
  template:
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ .Values.global.name }}-gitops
      volumes:
      - name: post-deploy
        configMap:
          name: {{ .Values.global.name }}-dp-post-deploy 
          defaultMode: 0711 
      containers:
      - image: cmwylie19/kube-argo-base
        name: post-deploy
        resources: {}
        volumeMounts:
        - name: post-deploy
          mountPath: /opt/scripts
        securityContext:
           runAsUser: 0
        command: ["sh","-c","/opt/scripts/post-deploy.sh"]
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ .Values.global.namespace }}
  name: {{ .Values.global.name }}-dp-post-deploy
  annotations:
    argocd.argoproj.io/sync-wave: "6"
data:
  post-deploy.sh: |
    #!/bin/bash
    set -eu
    argocd login --username admin \
      $(oc get routes -n {{ .Values.global.pattern }}-{{ .Values.clusterGroup.name}} {{ $.Values.clusterGroup.name }}-gitops-server -otemplate='{{`{{ .spec.host }}`}}') \
      --password $(oc get secret -n {{ .Values.global.pattern }}-{{ .Values.clusterGroup.name}} {{ $.Values.clusterGroup.name }}-gitops-cluster -ojsonpath='{.data.admin\.password}' | base64 -d) \
      --insecure \
      --grpc-web
    if ! oc get cm -n {{ index .Values.clusterGroup.applications "kong-cp" "namespace" }} cluster-urls; then
      echo "config map cluster-urls not found"
      exit 1
    fi
    if ! oc get appprojects -n {{ .Values.global.pattern }}-{{ .Values.clusterGroup.name}} dataplane; then
      echo "dataplane project cannot be retrieved"
      exit 1
    fi

    # for establishing kong clusters
    CP_CLUSTER_URL=$(oc get cm cluster-urls -n {{ index .Values.clusterGroup.applications "kong-cp" "namespace" }} -o jsonpath='{.data.CLUSTER_URL}')
    argocd app patch-resource {{ index .Values.clusterGroup.applications "kong-dp" "name" }} \
      --namespace {{ index .Values.clusterGroup.applications "kong-dp" "namespace" }} \
      --kind Deployment \
      --resource-name {{ index .Values.clusterGroup.applications "kong-dp" "name" }}-kong \
      --patch "{\"spec\": { \"template\" : { \"spec\" : {\"containers\":[{\"name\":\"proxy\",\"env\": [{ \"name\" : \"KONG_CLUSTER_CONTROL_PLANE\", \"value\": \"$CP_CLUSTER_URL:8005\" }, { \"name\" : \"KONG_CLUSTER_TELEMETRY_ENDPOINT\", \"value\": \"$CP_CLUSTER_URL:8006\" }]}]}}}}"  \
      --patch-type 'application/strategic-merge-patch+json'

    # patch rool url and redirect url for keycloak client
    # DP_DOMAIN=$(argocd cluster get dp -o server)
    # DP_DOMAIN=${DP_DOMAIN/https:\/\/api/apps}
    # DP_DOMAIN=${DP_DOMAIN/:*/}
    # if ! argocd app patch-resource dp-prereqs --kind KeycloakClient --resource-name kong-demo-client --namespace=keycloak --patch "{\"spec\":{\"client\":{\"rootUrl\": \"http://kong-dp-kong-proxy-kong.${DP_DOMAIN}/\",\"redirectUris\":[\"http://kong-kong-proxy-kong.${DP_DOMAIN}/*\"]}}}" --patch-type 'application/merge-patch+json'; then
    #   echo "keycloak client not found"
    #   exit 1
    # fi